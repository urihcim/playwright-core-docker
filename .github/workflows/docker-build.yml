name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: [node, bun]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "IMAGE=ghcr.io/${{ github.repository_owner }}/playwright-core" >> $GITHUB_ENV
          version=$(grep -oP 'playwright-core@\K[0-9.]+' Dockerfile.node | head -1)
          echo "VERSION=$version" >> $GITHUB_ENV
          node_version=$(grep -oP 'FROM node:\K[0-9.]+' Dockerfile.node | head -1)
          echo "NODE_VERSION=$node_version" >> $GITHUB_ENV
          bun_version=$(grep -oP 'FROM oven/bun:\K[0-9.]+' Dockerfile.bun | head -1)
          echo "BUN_VERSION=$bun_version" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.${{ matrix.tag }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{
              matrix.tag == 'node'
                && format('{0}:latest', env.IMAGE)
                || ''
            }}
            ${{
              matrix.tag == 'node'
                && format('{0}:{1}', env.IMAGE, env.VERSION)
                || ''
            }}
            ${{ format('{0}:{1}', env.IMAGE, matrix.tag) }}
            ${{ format('{0}:{1}-{2}', env.IMAGE, env.VERSION, matrix.tag) }}
            ${{
              matrix.tag == 'node'
                && format('{0}:{1}-{2}-{3}', env.IMAGE, env.VERSION, matrix.tag, env.NODE_VERSION)
                || format('{0}:{1}-{2}-{3}', env.IMAGE, env.VERSION, matrix.tag, env.BUN_VERSION)
            }}
